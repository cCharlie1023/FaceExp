(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{359:function(_,v,i){"use strict";i.r(v);var l=i(4),t=Object(l.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_2024-04-09-蚂蚁电话面面面经"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2024-04-09-蚂蚁电话面面面经"}},[_._v("#")]),_._v(" 2024-04-09 蚂蚁电话面面面经")]),_._v(" "),v("ol",[v("li",[_._v("Redis的优缺点")]),_._v(" "),v("li",[_._v("Redis的数据类型、List的常用命令")]),_._v(" "),v("li",[_._v("memCache了解过没")]),_._v(" "),v("li",[_._v("消息队列的可靠性、幂等性如何实现")]),_._v(" "),v("li",[_._v("高并发场景下的幂等性如何保证")]),_._v(" "),v("li",[_._v("Redis cluster了解过没？ 说一下哨兵机制。")]),_._v(" "),v("li",[_._v("说一下乐观锁与悲观锁、数据库如何实现的")]),_._v(" "),v("li",[_._v("场景题:用户后台 写配置信息 读多写少。")]),_._v(" "),v("li",[_._v("数据读多写少的情况下如何设计存储结构？数据库 + 分布式缓存。")]),_._v(" "),v("li",[_._v("如何快速地保持缓存数据库的数据一致性？")]),_._v(" "),v("li",[_._v("先写数据库后删缓存时 删缓存失败了应该给用户返回成功还是失败？")]),_._v(" "),v("li",[_._v("如果返回失败可能会产生那些问题？")]),_._v(" "),v("li",[_._v("返回成功如何保证数据一致性？")]),_._v(" "),v("li",[_._v("热点Key如何处理？")])]),_._v(" "),v("h2",{attrs:{id:"_2024-4-1-平台技术事业群智能引擎技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2024-4-1-平台技术事业群智能引擎技术"}},[_._v("#")]),_._v(" 2024-4-1 平台技术事业群智能引擎技术")]),_._v(" "),v("ol",[v("li",[_._v("k8s有哪些常见组件，各个组件的作用")]),_._v(" "),v("li",[_._v("listwatch机制")]),_._v(" "),v("li",[_._v("如何监控pod健康状态")]),_._v(" "),v("li",[_._v("如何创建线程池")]),_._v(" "),v("li",[_._v("线程池工作原理")]),_._v(" "),v("li",[_._v("如何设置核心线程数、最大线程数")]),_._v(" "),v("li",[_._v("线程间通信方式")]),_._v(" "),v("li",[_._v("wait/notify和Condition间的区别")]),_._v(" "),v("li",[_._v("介绍下知道的设计模式")]),_._v(" "),v("li",[_._v("模板方法模式使用场景")]),_._v(" "),v("li",[_._v("volatile")]),_._v(" "),v("li",[_._v("可见性和指令重排序底层实现")]),_._v(" "),v("li",[_._v("线程有哪些状态")]),_._v(" "),v("li",[_._v("为什么要关注线程状态")]),_._v(" "),v("li",[_._v("为什么要关注JVM相关问题")]),_._v(" "),v("li",[_._v("MySQL最左匹配原则")]),_._v(" "),v("li",[_._v("explain的作用，有哪些字段")]),_._v(" "),v("li",[_._v("MySQL如何解决幻读")])]),_._v(" "),v("p",[_._v("2024/3/19 蚂蚁一面（zyf）\n项目相关：")]),_._v(" "),v("ol",[v("li",[_._v("项目拷打以及场景问题解决")]),_._v(" "),v("li",[_._v("联合索引加一个字段有什么负面影响\n回答了实践测试发现了查询效率的提升，但是是会对增删维护的负担增加，并且会占用更多磁盘空间。")]),_._v(" "),v("li",[_._v("项目里使用了redis，使用的时候有什么注意事项\n这里结合项目来答的，提到了在使用时更新大量缓存阻塞主线程执行的情况，项目使用了管道解决。\n一般可以结合内存管理（淘汰）、持久化、高可用来说")]),_._v(" "),v("li",[_._v("什么量级的场景适合使用时序数据库\n回答 因为没有具体使用过，但是有了解一般在监控运维、工业生产、IoT这样的场景使用")]),_._v(" "),v("li",[_._v("实时数据库的数据采集以及维度指标（roleKey）命名规则的设计要点\n唯一性、有效期。不了解")]),_._v(" "),v("li",[_._v("如何判断程序有没有内存泄漏\n内存监控工具 JVisualVM、Profile内存分析")]),_._v(" "),v("li",[_._v("如何定位哪个位置的内存泄露\n用工具分析heap Dump 文件，查看对象的引用关系、实例数量以及对象占用内存等信息，找出位置。\n内存分析工具钟查看对象引用链，找出持有对象引用的地方。\n分析代码")]),_._v(" "),v("li",[_._v("linux如何找占用内存最高的进程")]),_._v(" "),v("li",[_._v("操作系统如何避免内存碎片")]),_._v(" "),v("li",[_._v("什么情况操作系统会出现内存碎片\n分外部碎片和内部碎片答")]),_._v(" "),v("li",[_._v("解释一下一致性哈希，接着问哈希环增加节点，会影响多少节点做数据迁移，并画在白纸上")]),_._v(" "),v("li",[_._v("解释一下两阶段提交")]),_._v(" "),v("li",[_._v("Coordinator在二阶段收到参与者提交完成通知后挂了，Participant怎么办")]),_._v(" "),v("li",[_._v("智力题，在白纸上描四个点，任意连三个构成一个三角形，口述实现判断第四个点和当前三角形位置关系的思路")]),_._v(" "),v("li",[_._v("二叉树的z字形层序遍历输出")])])])}),[],!1,null,null,null);v.default=t.exports}}]);